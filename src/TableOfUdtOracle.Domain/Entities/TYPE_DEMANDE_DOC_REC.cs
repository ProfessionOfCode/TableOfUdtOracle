//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TableOfUdtOracle.Domain.Entities
{
    using Oracle.ManagedDataAccess.Types;
    using System.Xml.Schema;
    using System.Xml.Serialization;


    public class TYPE_DEMANDE_DOC_REC : INullable, IOracleCustomType, IXmlSerializable
    {

        private bool m_IsNull;

        private string m_CODE_DOC;

        private decimal m_DOC_ID;

        private bool m_DOC_IDIsNull;

        private byte[] m_DATA_CONTENT;

        private string m_MIME_TYPE;

        private string m_FICH_NOM;

        public TYPE_DEMANDE_DOC_REC()
        {
            // TODO : Add code to initialise the object
            this.m_DOC_IDIsNull = true;
        }

        public TYPE_DEMANDE_DOC_REC(string str)
        {
            // TODO : Add code to initialise the object based on the given string 
        }

        public virtual bool IsNull
        {
            get
            {
                return this.m_IsNull;
            }
        }

        public static TYPE_DEMANDE_DOC_REC Null
        {
            get
            {
                TYPE_DEMANDE_DOC_REC obj = new TYPE_DEMANDE_DOC_REC();
                obj.m_IsNull = true;
                return obj;
            }
        }


        //[OracleObjectMappingAttribute("DOC_ID")]
        //public decimal DOC_ID
        //{
        //    get
        //    {
        //        return this.m_DOC_ID;
        //    }
        //    set
        //    {
        //        this.m_DOC_ID = value;
        //    }
        //}

        //public bool DOC_IDIsNull
        //{
        //    get
        //    {
        //        return this.m_DOC_IDIsNull;
        //    }
        //    set
        //    {
        //        this.m_DOC_IDIsNull = value;
        //    }
        //}

        [OracleObjectMappingAttribute("DATA_CONTENT")]
        public byte[] DATA_CONTENT
        {
            get
            {
                return this.m_DATA_CONTENT;
            }
            set
            {
                this.m_DATA_CONTENT = value;
            }
        }

        [OracleObjectMappingAttribute("MIME_TYPE")]
        public string MIME_TYPE
        {
            get
            {
                return this.m_MIME_TYPE;
            }
            set
            {
                this.m_MIME_TYPE = value;
            }
        }

        [OracleObjectMappingAttribute("FICH_NOM")]
        public string FICH_NOM
        {
            get
            {
                return this.m_FICH_NOM;
            }
            set
            {
                this.m_FICH_NOM = value;
            }
        }

        public virtual void FromCustomObject(Oracle.ManagedDataAccess.Client.OracleConnection con, object pUdt)
        {
            //Oracle.ManagedDataAccess.Types.OracleUdt.SetValue(con, pUdt, "CODE_DOC", this.CODE_DOC);
            //if ((DOC_IDIsNull == false))
            //{
            //    Oracle.ManagedDataAccess.Types.OracleUdt.SetValue(con, pUdt, "DOC_ID", this.DOC_ID);
            //}
            Oracle.ManagedDataAccess.Types.OracleUdt.SetValue(con, pUdt, "DATA_CONTENT", this.DATA_CONTENT);
            Oracle.ManagedDataAccess.Types.OracleUdt.SetValue(con, pUdt, "MIME_TYPE", this.MIME_TYPE);
            Oracle.ManagedDataAccess.Types.OracleUdt.SetValue(con, pUdt, "FICH_NOM", this.FICH_NOM);
        }
        public ReadOnlyBytesFile ReadOnlyBytesOfFile { get; set; }
        public virtual void ToCustomObject(Oracle.ManagedDataAccess.Client.OracleConnection con, object pUdt)
        {
            //this.CODE_DOC = ((string)(Oracle.ManagedDataAccess.Types.OracleUdt.GetValue(con, pUdt, "CODE_DOC")));
            //this.DOC_IDIsNull = Oracle.ManagedDataAccess.Types.OracleUdt.IsDBNull(con, pUdt, "DOC_ID");
            //if ((DOC_IDIsNull == false))
            //{
            //    this.DOC_ID = ((decimal)(Oracle.ManagedDataAccess.Types.OracleUdt.GetValue(con, pUdt, "DOC_ID")));
            //}
            if (Oracle.ManagedDataAccess.Types.OracleUdt.GetValue(con, pUdt, "DATA_CONTENT") is not null)
            {
                this.ReadOnlyBytesOfFile = new ReadOnlyBytesFile(((byte[])(Oracle.ManagedDataAccess.Types.OracleUdt.GetValue(con, pUdt, "DATA_CONTENT"))));
            }
            this.MIME_TYPE = ((string)(Oracle.ManagedDataAccess.Types.OracleUdt.GetValue(con, pUdt, "MIME_TYPE")));
            this.FICH_NOM = ((string)(Oracle.ManagedDataAccess.Types.OracleUdt.GetValue(con, pUdt, "FICH_NOM")));
        }

        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            // TODO : Read Serialized Xml Data
        }

        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            // TODO : Serialize object to xml data
        }

        public virtual XmlSchema GetSchema()
        {
            // TODO : Implement GetSchema
            return null;
        }

        public override string ToString()
        {
            // TODO : Return a string that represents the current object
            return "";
        }

        public static TYPE_DEMANDE_DOC_REC Parse(string str)
        {
            // TODO : Add code needed to parse the string and get the object represented by the string
            return new TYPE_DEMANDE_DOC_REC();
        }
    }

    // Factory to create an object for the above class
    [OracleCustomTypeMappingAttribute("C##STEPHANE.TYPE_DEMANDE_DOC_REC")]
    public class TYPE_DEMANDE_DOC_RESO_RECFactory : IOracleCustomTypeFactory
    {

        public virtual IOracleCustomType CreateObject()
        {
            TYPE_DEMANDE_DOC_REC obj = new TYPE_DEMANDE_DOC_REC();
            return obj;
        }
    }
    
    public class ReadOnlyBytesFile
    {
        public byte[] Bytes { get; set; }
        public ReadOnlyBytesFile(byte[] bytesToSave)
        {
            Bytes = bytesToSave;
        }
    }
}
